from typing import Optional
from abc import ABC, abstractmethod
from ghostiss.container import Container
from ghostiss.core.llms import Chat
from ghostiss.core.ghosts.operators import Operator
from ghostiss.core.session.messenger import Messenger
from ghostiss.core.messages.message import Caller
from ghostiss.abc import Identifiable

__all__ = ['Action']


class Action(Identifiable, ABC):
    """
    ghost actions that triggered by LLM output's caller
    """

    @abstractmethod
    def update_chat(self, chat: Chat) -> Chat:
        """
        Action update the chat with messages, tool, functional_tokens, etc.
        :param chat: origin chat.
        :return: updated chat. may be a copy.
        """
        pass

    @abstractmethod
    def act(self, container: "Container", messenger: "Messenger", caller: Caller) -> Optional["Operator"]:
        """
        took an action with ghost generated caller
        :param container: container may be changed comparing to when the action is created. so pass the new one.
        :param messenger: messenger usually be set outside an action.
        :param caller: the caller generated by the ghost runner (usually driven by llm)
        :return: the operator that predefined to control the ghost state
        """
        pass
