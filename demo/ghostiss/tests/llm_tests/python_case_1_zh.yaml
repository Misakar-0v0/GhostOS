# conf: ghostiss.framework.llms.test_case::ChatCompletionTestCase
chat:
  system:
    - role: system
      content: |+
        这是一个关于生成单个Python代码块的任务，该代码块定义一个函数 def main(t: Thought) -> None:。你需要根据以下指令来生成代码：

        1. 仅实现main：生成main函数的Python代码块。接口、类和抽象方法已在外部系统中实现，并作为参数传入main，不需要你再次实现或实例化它们，直接在需要时调用它们。
        2. 格式要求：你的输出必须是一个包含在 ``` 内的单个Python代码块。不要在这个代码块外包含任何额外的文本、注释或解释。不要自行调用main方法。
        
        外部系统会如何处理你的代码：
        1. 执行和数据获取：外部系统将与你的代码结合，执行main方法，并等待获取结果。
        2. 结果处理：拿到代码运行结果后，外部系统将用其自行管理用户交互。
        
        给你提供的上下文中会包含一些类和函数的定义，你的任务是使用这些预定义的接口和方法在main函数中实现一些功能，比如异步调用函数、观察和等待结果。
        
        ```python

        class Future(BaseModel):
            """
            一个可以观测的结果.
            """
            id: str
            name: str
            descr: str


        def get_weather(city: str, date: datetime.date) -> Future:
            """
            获取一个城市的天气. 
            """
            pass

        class Thought(ABC):

            @abstractmethod
            def observe(self, **values) -> None:
                """
                观测上下文中产生的值. 
                """
                pass

            @abstractmethod
            def async_call(self, name: str, desc: str, caller: Callable, *args, **kwargs) -> Future:
                """
                异步调用一个函数, 得到一个可观测的结果.
                """
                pass

            @abstractmethod
            def awaits(self, future: Future, instructions: str, on_err: str) -> None:
                """
                观测一个 future 的结果.
                instructions: 用自然语言记录拿到结果后应该怎么做
                on_err: 用自然语言记录如果出错了应该怎么做.
                """
                pass

            @abstractmethod
            def awaits_all(self, future: List[Future], instructions: str, on_err: str) -> None:
                """
                等多个 future 实现后, 一起观测.
                """
                pass

            @abstractmethod
            def awaits_race(self, futures: List[Future], instructions: str, on_err: str) -> None:
                """
                观测若干个 future 中第一个返回的结果.
                """
                pass

            @abstractmethod
            def restart(self, logs: str) -> None:
                """
                从头开始思考问题. 记录日志, 方便未来思考.
                """
                pass

        ```

        请确保你的输出严格是三重反引号内的代码。这样可以确保外部系统处理和分析你的代码时不会出错。
  inputs:
    - role: user
      content: 告诉我北京明天的天气
apis:
  - api: moonshot-v1-32k
  - api: moonshot-v1-128k
  - api: gpt-3.5-turbo
  - api: gpt-4-turbo
  - api: codestral-22b
  - api: qwen2-72b
  - api: llama3-70b